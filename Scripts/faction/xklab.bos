#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base,head1,head2,nano1,nano2,nano3,nano4,center1,center2,side1,side2,pad,nanojoined1,nanojoined2;

static-var  spray, unitviewer, statechg_DesiredState, statechg_StateChanging, building, terraintype;

// Signal definitions
#define SIG_ACTIVATE			2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx 1026 from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();			
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	unitviewer = FALSE;
	spray = 0;
	call-script InitState();
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = nano1;
	}
	if( spray == 1 )
	{
		piecenum = nano2;
	}
	if( spray == 2 )
	{
		piecenum = nano3;
	}
	if( spray == 3 )
	{
		piecenum = nano4;
	}
	++spray;
	if( spray >= 4 )
	{
		spray = 0;
	}
}


Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;

	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
building = 1;
}

StopBuilding()
{
building = 0;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}


Killed(severity, corpsetype) // how it explodes 
{ 
	corpsetype = 1; 
	explode head1 type EXPLODE_ON_HIT;
	explode head2 type EXPLODE_ON_HIT;
	explode side1 type EXPLODE_ON_HIT;
	explode side2 type EXPLODE_ON_HIT;
	explode center1 type EXPLODE_ON_HIT;
	explode center2 type EXPLODE_ON_HIT;
} 
