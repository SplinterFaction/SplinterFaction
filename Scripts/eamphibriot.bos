#define TA // This is a TA script 

#include "sfxtype.h" 
#include "exptype.h" 

piece base, turret, barrel1, firepoint1, dirt, frontwheels, rearwheels, middlewheels; // these are the pieces of the model 

#include "ROCKUNIT.H"

static-var terraintype, bmoving, moving, underwater, WeaponTypeSelect; // these are the variables 

// #define gdscannon 1024+0 // this is a custom explosion generator thinging 

// Signal definitions 
#define SIG_AIM 2

#define shot 1024+0

SmokeUnit(healthpercent, sleeptime, smoketype) // this is a standard smoke point define 
{ 
while( get BUILD_PERCENT_LEFT ) 
{ 
sleep 400; 
} 
while( TRUE ) 
{ 
healthpercent = get HEALTH; 
if( healthpercent < 66 ) 
{ 
smoketype = 256 | 2; 
if( Rand( 1, 66 ) < healthpercent ) 
{ 
smoketype = 256 | 1; 
} 
emit-sfx 1026 from turret; 
} 
sleeptime = healthpercent * 50; 
if( sleeptime < 200 ) 
{ 
sleeptime = 200; 
} 
sleep sleeptime; 
} 
} 

StartMoving()
{
   bMoving = TRUE;
   moving = TRUE;
}

StopMoving()
{
   bMoving = FALSE;
   moving = FALSE;
}

Thrust()
{
   while( TRUE )
   {
      if (moving)    
      {
  		 emit-sfx 1025 + 0 from dirt;
         spin frontwheels around x-axis speed <500.005495>;
         spin middlewheels around x-axis speed <500.005495>;
         spin rearwheels around x-axis speed <500.005495>;
         
      }
      else
      {
         stop-spin frontwheels around x-axis decelerate <200.000000>;
         stop-spin middlewheels around x-axis decelerate <200.000000>;
         stop-spin rearwheels around x-axis decelerate <200.000000>;
      }
     sleep 400;    
   }
}

WeaponType(select)
{
	WeaponTypeSelect = select;
}

Create() // tells it what to do on creation 
{
        start-script Thrust();
        start-script SmokeUnit(); 
        WeaponTypeSelect = 1;
} 

RestoreAfterDelay() // restore function to turn the turret and so forth back to start 
{ 
sleep 3000; 
turn turret to y-axis <0> speed <60>; 
turn barrel1 to x-axis <0> speed <30>;  
} 

AimWeapon1(heading, pitch) // single weapon with 2 fires this tell sit what to do while aiming 
{ 
if(!WeaponTypeSelect OR (get WEAPON_RELOADSTATE(2) > get GAME_FRAME)) return (0);
signal SIG_AIM; 
set-signal-mask SIG_AIM; 
turn turret to y-axis heading speed <5000>; 
turn barrel1 to x-axis <0> - pitch speed <5000>;  
wait-for-turn turret around y-axis;
wait-for-turn barrel1 around x-axis;  
start-script RestoreAfterDelay(); 
return (1); 
} 

FireWeapon1() // what do while firing, fires 1 barrel then the next , and resets 
{ 
emit-sfx shot from firepoint1;
} 

BlockShot1(unit, block)
{
	if (!WeaponTypeSelect)
	{
		block = 1;
	}
}

AimFromWeapon1(piecenum) // where it aims the weapon from 
{ 
piecenum = barrel1; 
} 

QueryWeapon1(piecenum) // where the shot is called from 
{ 
piecenum = firepoint1; 
} 


AimWeapon2(heading, pitch) // single weapon with 2 fires this tell sit what to do while aiming 
{ 
if(WeaponTypeSelect OR (get WEAPON_RELOADSTATE(2) > get GAME_FRAME)) return (0);
signal SIG_AIM; 
set-signal-mask SIG_AIM; 
turn turret to y-axis heading speed <5000>; 
turn barrel1 to x-axis <0> - pitch speed <5000>;  
wait-for-turn turret around y-axis;
wait-for-turn barrel1 around x-axis;  
start-script RestoreAfterDelay(); 
return (1); 
} 

FireWeapon2() // what do while firing, fires 1 barrel then the next , and resets 
{ 
emit-sfx shot from firepoint1;
} 

BlockShot2(unit, block)
{
	if (WeaponTypeSelect)
	{
		block = 1;
	}
}

AimFromWeapon2(piecenum) // where it aims the weapon from 
{ 
piecenum = barrel1; 
} 

QueryWeapon2(piecenum) // where the shot is called from 
{ 
piecenum = firepoint1; 
} 


Killed(severity, corpsetype) // how it explodes 
{ 
	corpsetype = 1; 
	explode barrel1 type EXPLODE_ON_HIT;
	explode turret type EXPLODE_ON_HIT;
	explode frontwheels type EXPLODE_ON_HIT;
	explode rearwheels type EXPLODE_ON_HIT;
	explode middlewheels type EXPLODE_ON_HIT;
} 
