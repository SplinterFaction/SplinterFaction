//            * Header Info *
// VersionSignature                     4
// NumberOfScripts                     17
// NumberOfPieces                      9
// LengthOfScripts                     3ce
// NumberOfStaticVars                  5
// UKZero                              0
// OffsetToScriptCodeIndexArray        f64
// OffsetToScriptNameOffsetArray       fa8
// OffsetToPieceNameOffsetArray        fec
// OffsetToScriptCode                  2c
// OffsetToNameArray                   1010

// OffsetToFirstName                   1010

#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, firepoint, door1, door2;

static-var  Static_Var_1, restore_delay, gun_1, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


activatescr()
{
	if( TRUE )
	{
		turn door1 to z-axis <0.000000> now;
		turn door1 to z-axis <0> speed <500.000000>;
		turn door2 to z-axis <0.000000> now;
		turn door2 to z-axis <-0> speed <500.000000>;
	}

	sleep 3;
	return (0);
}

deactivatescr()
{
	if( TRUE )
	{
		turn door1 to z-axis <-0> now;
		turn door1 to z-axis <0.000000> speed <500.000000>;
		turn door2 to z-axis <90> now;
		turn door2 to z-axis <0.000000> speed <500.000000>;
	}

	sleep 14;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 4 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from door1;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from door2;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Go()
{
	call-script activatescr();
	Static_Var_1 = 1;
	return (0);
}

Stop()
{
	Static_Var_1 = 0;
	call-script deactivatescr(); 
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
		currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	Static_Var_1 = 0;
	gun_1 = firepoint;
	restore_delay = 3000;
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	return (1);
}

FirePrimary()
{
	gun_1 = firepoint;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = firepoint;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = firepoint;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	corpsetype = 1; 
	explode base type EXPLODE_ON_HIT;
	explode door1 type EXPLODE_ON_HIT;
	explode door2 type EXPLODE_ON_HIT;
}
