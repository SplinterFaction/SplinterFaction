#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, barrel1, firepoint1, dirt;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, bMoving, moving;

// Signal definitions 
#define SIG_AIM 2 // this is a aim define 


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx 1026 from barrel1;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

EmitWakes()
{
	while( TRUE )
	{
		if( Static_Var_3 )
		{
			emit-sfx 2 from base;
		}
		sleep 300;
	}
}

Thrust()
{
   while( TRUE )
   {
      if (moving)    
      {
              emit-sfx 1025 + 0 from dirt;
                }
        sleep 400;    
   }
}

StartMoving()
{
        moving=1;
}
   
StopMoving()
{   
        moving=0; 
}



setSFXoccupy(Func_Var_1)
{
	Static_Var_2 = Func_Var_1;
	if( Static_Var_2 == 2 )
	{
		move base to y-axis [-0.850000] speed [50.000000];
		set UNKNOWN_UNIT_VALUE(79) to 1;
	}
	else
	{
		move base to y-axis [0.000000] speed [50.000000];
		set UNKNOWN_UNIT_VALUE(79) to 0;
	}
	if( Static_Var_2 == 4 )
	{
		move base to y-axis [0.000000] speed [50.000000];
		set UNKNOWN_UNIT_VALUE(79) to 0;
	}
	else
	{
		move base to y-axis [-0.850000] speed [50.000000];
		set UNKNOWN_UNIT_VALUE(79) to 1;
	}
}

Create()
{
    start-script Thrust();
	start-script setSFXoccupy();
	start-script EmitWakes();
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 3000;
	turn turret to y-axis <0.000000> speed <60.000000>;
	turn barrel1 to x-axis <0> speed <30>;
}

AimWeapon1(heading, pitch) // single weapon with 2 fires this tell sit what to do while aiming 
{ 
signal SIG_AIM; 
set-signal-mask SIG_AIM; 
turn turret to y-axis heading now;
turn barrel1 to x-axis <0> - pitch now; 
wait-for-turn turret around y-axis;
wait-for-turn barrel1 around x-axis;  
start-script RestoreAfterDelay(); 
return (1); 
} 

FireWeapon1()
{

		emit-sfx 1024 + 0 from firepoint1;
}

AimFromWeapon1(piecenum) // where it aims the weapon from 
{ 
piecenum = barrel1; 
} 

QueryWeapon1(piecenum) // where the shot is called from 
{ 
piecenum = firepoint1;
} 



Killed(severity, corpsetype) // how it explodes 
{ 
	corpsetype = 1; 
	explode barrel1 type EXPLODE_ON_HIT;
	explode turret type EXPLODE_ON_HIT;
} 
