#define TA        // This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece base, turret, barrel1, firepoint1, engine1, engine2, engine3, engine4, engine5, engine6, engine7, engine8;

static-var  moving, flames, shooting_num;

// Signal definitions
#define SIG_AIM 2

SmokeUnit(healthpercent, sleeptime, smoketype)
{
   while( get BUILD_PERCENT_LEFT )
   {
      sleep 400;
   }
   while( TRUE )
   {
      healthpercent = get HEALTH;
      if( healthpercent < 66 )
      {
         smoketype = 256 | 2;
         if( Rand( 1, 66 ) < healthpercent )
         {
            smoketype = 256 | 1;
         }
         emit-sfx 1025 from base;
      }
      sleeptime = healthpercent * 50;
      if( sleeptime < 200 )
      {
         sleeptime = 200;
      }
      sleep sleeptime;
   }
}

Thrust()
{
   while( TRUE )
   {
      if (moving)    
      {
              spin base around y-axis speed <50.005495>;
                }
        sleep 5;    
   }
}

StartMoving()
{
        moving=1;
}
   
StopMoving()
{   
        moving=0; 
}

Create()
   {
        start-script SmokeUnit();
   }

RestoreAfterDelay() // restore function to turn the turret and so forth back to start 
{ 
	sleep 3000; 
	turn turret to y-axis <0> speed <60>;
	turn barrel1 to x-axis <0> speed <30>;  
} 

AimWeapon1(heading, pitch) // single weapon with 2 fires this tell sit what to do while aiming 
{ 
	signal SIG_AIM; 
	set-signal-mask SIG_AIM; 
	turn turret to y-axis heading speed <500>;
	turn barrel1 to x-axis <0> - pitch speed <500>; 
	wait-for-turn turret around y-axis;
	wait-for-turn barrel1 around x-axis;  
	start-script RestoreAfterDelay(); 
	return (1); 
} 

FireWeapon1() // what do while firing, fires 1 barrel then the next , and resets 
{ 
emit-sfx 1024 + 0 from firepoint1;
} 

AimFromWeapon1(piecenum) // where it aims the weapon from 
{ 
	piecenum = turret; 
} 

QueryWeapon1(piecenum) // where the shot is called from 
{ 
	piecenum = firepoint1;  
} 

Killed(severity, corpsetype) // how it explodes 
{ 
	corpsetype = 1; 
	explode base type EXPLODE_ON_HIT;
	explode turret type EXPLODE_ON_HIT;
	explode barrel1 type EXPLODE_ON_HIT;
} 