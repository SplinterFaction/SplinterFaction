#define TA // This is a TA script 

#include "sfxtype.h" 
#include "exptype.h" 

piece base, turret1, barrel1, firepoint1, turret2, barrel2, firepoint2, turret3, barrel3, firepoint3, turret4, barrel4, firepoint4, turret5, barrel5, firepoint5, dirt, frontforwardwheels, frontbackwheels, rearforwardwheels, rearbackwheels; // these are the pieces of the model 

#include "ROCKUNIT.H"

static-var terraintype, bmoving, moving, underwater, shooting_num, WeaponTypeSelect; // these are the variables 

// #define gdscannon 1024+0 // this is a custom explosion generator thinging 

// Signal definitions 
#define SIG_AIM 2
#define SIG_AIM_2 4


SmokeUnit(healthpercent, sleeptime, smoketype) // this is a standard smoke point define 
{ 
while( get BUILD_PERCENT_LEFT ) 
{ 
sleep 400; 
} 
while( TRUE ) 
{ 
healthpercent = get HEALTH; 
if( healthpercent < 66 ) 
{ 
smoketype = 256 | 2; 
if( Rand( 1, 66 ) < healthpercent ) 
{ 
smoketype = 256 | 1; 
} 
emit-sfx 1025 from turret3; 
} 
sleeptime = healthpercent * 50; 
if( sleeptime < 200 ) 
{ 
sleeptime = 200; 
} 
sleep sleeptime; 
} 
} 

StartMoving()
{
   bMoving = TRUE;
   moving = TRUE;
}

StopMoving()
{
   bMoving = FALSE;
   moving = FALSE;
}

Thrust()
{
   while( TRUE )
   {
      if (moving)    
      {
  		 emit-sfx 1024 + 0 from dirt;
         spin frontforwardwheels around x-axis speed <500.005495>;
         spin frontbackwheels around x-axis speed <500.005495>;
         spin rearforwardwheels around x-axis speed <500.005495>;
         spin rearbackwheels around x-axis speed <500.005495>;
         
      }
      else
      {
         stop-spin frontforwardwheels around x-axis decelerate <200.000000>;
         stop-spin frontbackwheels around x-axis decelerate <200.000000>;
         stop-spin rearforwardwheels around x-axis decelerate <200.000000>;
         stop-spin rearbackwheels around x-axis decelerate <200.000000>;
      }
     sleep 400;    
   }
}

WeaponType(select)
{
	WeaponTypeSelect = select;
}

Create() // tells it what to do on creation 
{
		shooting_num=1;
        start-script Thrust();
        start-script SmokeUnit(); 
        WeaponTypeSelect = 1;
} 

RestoreAfterDelay() // restore function to turn the turret and so forth back to start 
{ 
sleep 10000; 
turn turret1 to y-axis <0> speed <60>; 
turn turret2 to y-axis <0> speed <60>; 
turn turret3 to y-axis <0> speed <60>; 
turn turret4 to y-axis <0> speed <60>; 
turn turret5 to y-axis <0> speed <60>; 
turn barrel1 to x-axis <0> speed <30>;
turn barrel2 to x-axis <0> speed <30>;
turn barrel3 to x-axis <0> speed <30>;
turn barrel4 to x-axis <0> speed <30>;
turn barrel5 to x-axis <0> speed <30>;  
} 

AimWeapon1(heading, pitch) // single weapon with 2 fires this tell sit what to do while aiming 
{ 
if(!WeaponTypeSelect OR (get WEAPON_RELOADSTATE(2) > get GAME_FRAME)) return (0);
signal SIG_AIM; 
set-signal-mask SIG_AIM; 
turn turret1 to y-axis heading speed <5000>; 
turn turret2 to y-axis heading speed <5000>; 
turn turret3 to y-axis heading speed <5000>; 
turn turret4 to y-axis heading speed <5000>; 
turn turret5 to y-axis heading speed <5000>; 
turn barrel1 to x-axis <0> - pitch speed <5000>;  
turn barrel2 to x-axis <0> - pitch speed <5000>; 
turn barrel3 to x-axis <0> - pitch speed <5000>; 
turn barrel4 to x-axis <0> - pitch speed <5000>; 
turn barrel5 to x-axis <0> - pitch speed <5000>; 
wait-for-turn turret1 around y-axis;
wait-for-turn turret2 around y-axis;
wait-for-turn turret3 around y-axis;
wait-for-turn turret4 around y-axis;
wait-for-turn turret5 around y-axis;
wait-for-turn barrel1 around x-axis;  
wait-for-turn barrel2 around x-axis;
wait-for-turn barrel3 around x-axis;
wait-for-turn barrel4 around x-axis;
wait-for-turn barrel5 around x-axis;
start-script RestoreAfterDelay(); 
return (1); 
} 

FireWeapon1() // what do while firing, fires 1 barrel then the next , and resets 
{ 

	if(shooting_num==1)
         {
         	emit-sfx 1026 from firepoint2;
         }
	if(shooting_num==2)
         {
         	emit-sfx 1026 from firepoint3;
         }
	if(shooting_num==3)
         {
         	emit-sfx 1026 from firepoint4;
         }
	if(shooting_num==4)
         {
         	emit-sfx 1026 from firepoint5;
         }
	if(shooting_num==5)
         {
         	emit-sfx 1026 from firepoint1;
         }

	shooting_num=shooting_num+1;

            if( shooting_num == 6)
            {  
            	shooting_num=1;
            }
} 

BlockShot1(unit, block)
{
	if (!WeaponTypeSelect)
	{
		block = 1;
	}
}

AimFromWeapon1(piecenum) // where it aims the weapon from 
{ 
piecenum = turret3; 
} 

QueryWeapon1(piecenum) // where the shot is called from 
{ 

if (shooting_num==1) 
     {  
     	piecenum=firepoint1;     
     }

     if (shooting_num==2)
     {   
     	piecenum=firepoint2;
     } 
     
     if (shooting_num==3)
     {   
     	piecenum=firepoint3;
     } 
     
     if (shooting_num==4)
     {   
     	piecenum=firepoint4;
     } 
     
     if (shooting_num==5)
     {   
     	piecenum=firepoint5;
     } 
} 


AimWeapon2(heading, pitch) // single weapon with 2 fires this tell sit what to do while aiming 
{ 
if(WeaponTypeSelect OR (get WEAPON_RELOADSTATE(2) > get GAME_FRAME)) return (0);
signal SIG_AIM; 
set-signal-mask SIG_AIM; 
turn turret1 to y-axis heading speed <5000>; 
turn turret2 to y-axis heading speed <5000>; 
turn turret3 to y-axis heading speed <5000>; 
turn turret4 to y-axis heading speed <5000>; 
turn turret5 to y-axis heading speed <5000>; 
turn barrel1 to x-axis <0> - pitch speed <5000>;  
turn barrel2 to x-axis <0> - pitch speed <5000>; 
turn barrel3 to x-axis <0> - pitch speed <5000>; 
turn barrel4 to x-axis <0> - pitch speed <5000>; 
turn barrel5 to x-axis <0> - pitch speed <5000>; 
wait-for-turn turret1 around y-axis;
wait-for-turn turret2 around y-axis;
wait-for-turn turret3 around y-axis;
wait-for-turn turret4 around y-axis;
wait-for-turn turret5 around y-axis;
wait-for-turn barrel1 around x-axis;  
wait-for-turn barrel2 around x-axis;
wait-for-turn barrel3 around x-axis;
wait-for-turn barrel4 around x-axis;
wait-for-turn barrel5 around x-axis;
start-script RestoreAfterDelay(); 
return (1); 
} 

FireWeapon2() // what do while firing, fires 1 barrel then the next , and resets 
{ 

	if(shooting_num==1)
         {
         	emit-sfx 1026 from firepoint2;
         }
	if(shooting_num==2)
         {
         	emit-sfx 1026 from firepoint3;
         }
	if(shooting_num==3)
         {
         	emit-sfx 1026 from firepoint4;
         }
	if(shooting_num==4)
         {
         	emit-sfx 1026 from firepoint5;
         }
	if(shooting_num==5)
         {
         	emit-sfx 1026 from firepoint1;
         }

	shooting_num=shooting_num+1;

            if( shooting_num == 6)
            {  
            	shooting_num=1;
            }
} 

BlockShot2(unit, block)
{
	if (WeaponTypeSelect)
	{
		block = 1;
	}
}

AimFromWeapon2(piecenum) // where it aims the weapon from 
{ 
piecenum = turret3; 
} 

QueryWeapon2(piecenum) // where the shot is called from 
{ 

if (shooting_num==1) 
     {  
     	piecenum=firepoint1;     
     }

     if (shooting_num==2)
     {   
     	piecenum=firepoint2;
     } 
     
     if (shooting_num==3)
     {   
     	piecenum=firepoint3;
     } 
     
     if (shooting_num==4)
     {   
     	piecenum=firepoint4;
     } 
     
     if (shooting_num==5)
     {   
     	piecenum=firepoint5;
     } 
} 


Killed(severity, corpsetype) // how it explodes 
{ 
	corpsetype = 1; 
	explode barrel1 type EXPLODE_ON_HIT;
	explode turret1 type EXPLODE_ON_HIT;
	explode barrel2 type EXPLODE_ON_HIT;
	explode turret2 type EXPLODE_ON_HIT;
	explode barrel3 type EXPLODE_ON_HIT;
	explode turret3 type EXPLODE_ON_HIT;
	explode barrel4 type EXPLODE_ON_HIT;
	explode turret4 type EXPLODE_ON_HIT;
	explode barrel5 type EXPLODE_ON_HIT;
	explode turret5 type EXPLODE_ON_HIT;
	explode frontforwardwheels type EXPLODE_ON_HIT;
	explode frontbackwheels type EXPLODE_ON_HIT;
	explode rearforwardwheels type EXPLODE_ON_HIT;
	explode rearbackwheels type EXPLODE_ON_HIT;
} 
