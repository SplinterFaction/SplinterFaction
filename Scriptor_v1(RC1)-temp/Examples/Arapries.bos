piece  torso, emitjim, bloodl, bloodr, bloodm, Hip, LegUL, LegUR,
       LegLR, LegLL, ArmUL, ArmUR, Head, ArmLR, SleaveR, HandR,
       ArmLL, SleaveL, waker, wakel, HandL, Staff, StaffEmit, head5,
       torso5, staff10;

static-var	moving, aiming, firing, building, busy_dying;
static-var	pause_loop, kill_attack, restored, legs_restored;
static-var	direction, vetlevel, weapon_var, restore_delay;

#define TURN_RESTORE_SPEED	<500>
#define MOVE_RESTORE_SPEED	[500]
#define SIG_AIM				2
#define SIG_MOVE			4
#define SIG_WIND			8
#define SIG_RESTORE			16

#include "EXPtype.h"
#include "SFXtype.h"

#define ANIM_VARIABLE		(moving && !firing)
#include "arapries\walk.bos"
#include "arapries\walk_road.bos"
#include "arapries\walk_water.bos"
#undef ANIM_VARIABLE

#define ANIM_VARIABLE		moving
#include "arapries\walk_legs.bos"
#undef ANIM_VARIABLE

#define ANIM_VARIABLE		(building && !aiming)
#include "arapries\build.bos"
#undef ANIM_VARIABLE

#define ANIM_VARIABLE		!aiming
#include "arapries\startbuild.bos"
#undef ANIM_VARIABLE

#define ANIM_VARIABLE		(!busy_dying && !kill_attack)
//#include "arapries\attack1.bos"
#include "arapries\restore_x.bos"
#include "arapries\restore_legs.bos"
#undef ANIM_VARIABLE

#define ANIM_VARIABLE		TRUE
#include "arapries\death.bos"
#undef ANIM_VARIABLE


BuildControl()
{
	for (;;)
	{
		if (building && !aiming)
		{
			while (pause_loop)
				sleep 100;

			call-script build();
		}
		else
			sleep 100;
	}
}

MoveWatcher()
{
	set-signal-mask SIG_MOVE;

	for (;;)
	{
		moving = ((get CURRENT_SPEED) > 5 || direction);
		sleep 100;
	}
}

MeleeControl()
{
	for (;;)
	{
		if (moving)
		{
			if (firing)
				call-script walk_legs();
			else if (get IN_WATER)
				call-script walk_water();
			else if (get ON_ROAD)
				call-script walk_road();
			else
				call-script walk();

			legs_restored = FALSE;
			restored = FALSE;
		}
		else if (!busy_dying)
		{
			if (!legs_restored)
			{
				call-script restore_legs();
				legs_restored = TRUE;
			}
			else if (!restored && !aiming && !building)
			{
				call-script restore_x();
				restored = TRUE;
			}
			else
				sleep 100;
		}
		else
			sleep 100;
	}
}

StatusControl()
{
	var x;

	for (x = 0; x < 2; sleep 1000)
	{
		vetlevel = get VETERAN_LEVEL;

		if (x == 0)
		{
			if (vetlevel > 4)
			{
				hide head;
				hide torso;

				show head5;
				show torso5;

				++x;
			}
		}
		else if (x == 1)
		{
			if (vetlevel > 9)
			{
				hide staff;

				show staff10;

				++x;
			}
		}
	}
}

Create()
{
	hide head5;
	hide torso5;
	hide staff10;

	move emitjim to x-axis [0.0] now;
	move emitjim to y-axis [25.0] now;
	move emitjim to z-axis [8.0] now;

	moving = FALSE;
	aiming = FALSE;
	firing = FALSE;
	building = FALSE;
	busy_dying = FALSE;

	pause_loop = FALSE;
	kill_attack = FALSE;
	legs_restored = FALSE;
	restored = FALSE;

	direction = 0;
	vetlevel = 0;
	weapon_var = 0;
	restore_delay = 5000;

	while (get BUILD_PERCENT_LEFT)
		sleep 100;

	start-script BuildControl();
	start-script MoveWatcher();
	start-script MeleeControl();
	start-script StatusControl();
}

StartBuilding()
{
	set INBUILDSTANCE to TRUE;
	building = TRUE;

	if (!aiming)
	{
		pause_loop = TRUE;
		call-script startbuild();
		pause_loop = FALSE;
		restored = FALSE;
	}
}

StopBuilding()
{
	set INBUILDSTANCE to FALSE;
	building = FALSE;
}

TurnDirection(dir)
{
	direction = dir;
}

SetMaxReloadTime(time)
{
	restore_delay = time * 2;
}

RestoreAfterDelay()
{
	signal SIG_RESTORE;
	set-signal-mask SIG_RESTORE;

	var x;

	for (x = 0; x < restore_delay; sleep 100)
	{
		if (kill_attack)
			x = restore_delay;
		else
			x = x + 100;
	}

	while (firing)
		sleep 100;

	set WEAPON_AIM_ABORTED to 0;
	aiming = FALSE;

	if (building)
	{
		pause_loop = TRUE;
		call-script startbuild();
		pause_loop = FALSE;
		restored = FALSE;
	}
}

AimWeapon(heading, pitch, weaponnum)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	aiming = TRUE;

	while (firing)
		sleep 100;

	if (building)
	{
		call-script restore_x();
		sleep 250;
	}

	start-script RestoreAfterDelay();
	set WEAPON_READY to weaponnum;
}
/*
FireWeapon(weaponnum)
{
	firing = TRUE;
	kill_attack = FALSE;

	call-script attack1(weaponnum);

	firing = FALSE;
}
*/
TargetCleared(weaponnum)
{
	set WEAPON_AIM_ABORTED to weaponnum;
	kill_attack = TRUE;
	signal SIG_AIM;
}

QueryWeapon(piecenum, weaponnum)
{
	piecenum = emitjim;
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

QueryBlood(piecenum)
{
	piecenum = bloodl + rand(0,2);
}

Dying(damagetype)
{
	set-signal-mask 0;

	signal SIG_AIM;
	signal SIG_MOVE;
	signal SIG_RESTORE;

	moving = FALSE;
	busy_dying = TRUE;

	if (damagetype != DT_EXPLOSION)
	{
		if (rand(1,4) == 1)
			play-sound( "ARAPRIESDIE2", PLAYSOUND_PRIORITY_BATTLE );

		call-script death();
		explode hip type EXPTYPE_SMALLSMOKE | BITMAPONLY;
	}

	set FINISHED_DYING to TRUE;
}

Killed(severity, corpsetype, damagetype)
{
	if (damagetype == DT_EXPLOSION)
	{
		corpsetype = 0;

		explode head type FALL;
		explode armur type FALL;
		explode armul type FALL;
		explode armlr type FALL;
		explode armll type FALL;
		explode torso type FALL | EXPTYPE_BLOODEXPLOSION;
		explode legul type FALL;
		explode legur type FALL;
		explode handr type FALL;
		explode handl type FALL;
		explode legll type FALL;
		explode leglr type FALL;
	}
	else if (damagetype == DT_FIRE)
	{
		var x;

		corpsetype = 1;

		for (x = 0; x < 3; sleep 480)
		{
			emit-sfx SFXTYPE_SMALLDAMAGEFLAME from handl;
			emit-sfx SFXTYPE_SMALLDAMAGEFLAME from handr;
			emit-sfx SFXTYPE_SMALLDAMAGEFLAME from head;

			++x;
		}
	}
	else
		corpsetype = 1;
}