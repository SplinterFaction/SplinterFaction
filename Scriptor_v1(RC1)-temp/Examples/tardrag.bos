piece  blkbody, blkhead, emitjim, emitblood1, emitblood2, emitblood3, emitblood4, emitblood5,
       blklegl1, blklegr1, blkwingl1, blkwingr4, blkwingl3, blkneck2_5, jaw, emitwpn1,
       emitsmoke1, emitsmoke2, blklegr3, blklegl3, blkneck1, blktail1, blkwingr1, blkwingr2,
       blkwingr3, blkwingl2, blkwingl4, blktail2, blktail3, blkneck2, blklegr2, blklegr4a,
       blklegr4b, blklegr4c, blklegl2, blklegl4a, blklegl4b, blklegl4c, tar_body, blkwingr4_5,
       blkwingl4_5, blktail3_10, blkneck1_5;

static-var	flying, soaring, landing, firing, attacking;
static-var	airborne, restored, fly_var;
static-var	vetlevel, flapcount, restore_delay;

#include "EXPtype.h"
#include "SFXtype.h"

#define TURN_RESTORE_SPEED	<100>
#define MOVE_RESTORE_SPEED	[100]
#define SIG_AIM				2
#define SIG_MOVE			4
#define SIG_ABORT			8
#define SIG_BATTLE			16
#define SIG_LANDING			32
#define SIG_FALLING			64
#define SIG_RESTORE			128

#define ANIM_VARIABLE		fly_var
#include "tardrag\launch.bos"
#include "tardrag\fly.bos"
#include "tardrag\soar.bos"
#include "tardrag\attack1.bos"
#undef ANIM_VARIABLE

#define ANIM_VARIABLE		TRUE
#include "tardrag\land.bos"
#include "tardrag\restore_x.bos"
#undef ANIM_VARIABLE


BeginFlight()						// Called on all move orders, including waypoint hits
{
	signal SIG_ABORT;				// kills aborted landings before land() begins
	signal SIG_LANDING;				// kills aborted landings before land() loops
	signal SIG_FALLING;				// kills aborted landings while land() loops
	signal SIG_RESTORE;				// can probably go
	flapcount = 0;

	landing = FALSE;
	fly_var = TRUE;
}

BeginLanding()						// Called upon completion of move mission, unless another is queued
{
	set-signal-mask SIG_ABORT;

	fly_var = FALSE;

	if (!landing)					// This script loops until airborne == FALSE;
		start-script land();		// This loop carries the SIG_FALLING mask.
}

RestoreWatcher()
{
	for (;;)
	{
		if (airborne)
			sleep 100;
		else
		{
			if (!restored && !landing)
			{
				call-script restore_x();
				restored = TRUE;
			}
			else
				sleep 100;
		}
	}
}

FlightControl()
{
	for(;;)
	{
		if (airborne)
		{
			flying = TRUE;
			restored = FALSE;

			if (!attacking)
			{
				if (flapcount < 4)	// Don't soar() until at least the fifth flap.
				{
					if (flapcount == 0)
						call-script launch();	// Merge from default() to fly().  Keep this short!

					call-script fly();
					++flapcount;
				}
				else
				{
					if (rand(1,10) == 1)
						call-script soar();
					else
						call-script fly();
				}
			}
			else
				call-script attack1();

			flying = FALSE;
		}
		else
			sleep 100;
	}
}

HeadTurner()
{
	var ran_turn, ran_side, ran_angle, ran_speed, ran_stare;

	ran_turn = 0;	// How often head will turn.
	ran_side = 0;	// Which direction head will turn.
	ran_angle = 0;	// How far head will turn.
	ran_speed = 0;	// How quickly head will turn.
	ran_stare = 0;	// How long bird pause before looking ahead again.

	for (;;)
	{
		if (!attacking && !soaring)
		{
			ran_turn = rand(1,3);				// Decide whether or not to turn head.

			if (ran_turn == 1)
			{
				ran_side = rand(1,2);			// Decide which direction to look.
				ran_angle = rand(1,20);			// Decide how far to turn neck(head = x * 1.5).
				ran_speed = rand(10,50);		// Decide how quickly to turn neck(head = x * 1.5).
				ran_stare = rand(1000,3000);	// Decide how long to hold stare.

				if (ran_side == 2)				// Adjust to 1(right), or -1(left).
					ran_side = 1 * (0-1);

				turn blkhead to y-axis (<1.5> * (ran_angle * (ran_side))) speed (<1.5> * ran_speed);
				turn blkneck2 to y-axis (<1.5> * (ran_angle * (ran_side))) speed (<1.5> * ran_speed);
				wait-for-turn blkhead around y-axis;
				wait-for-turn blkneck2 around y-axis;

				sleep ran_stare;

				turn blkhead to y-axis <0.0> speed <75.0>;
				turn blkneck2 to y-axis <0.0> speed <75.0>;
				wait-for-turn blkhead around y-axis;
				wait-for-turn blkneck2 around y-axis;
			}
			else
				sleep 2000;
		}
		else
			sleep 100;
	}
}

StatusControl()
{
	var x;

	for (x = 0; x < 2; sleep 1000)
	{
		vetlevel = get VETERAN_LEVEL;

		if (x == 0)
		{
			if (vetlevel > 4)
			{
				show blkneck1_5;
				show blkneck2_5;
				show blkwingl4_5;
				show blkwingr4_5;
				++x;
			}
		}
		else if (x == 1)
		{
			if (vetlevel > 9)
			{
				show blktail3_10;
				++x;
			}
		}
	}
}

Create()
{
	hide blkneck1_5;
	hide blkneck2_5;
	hide blkwingl4_5;
	hide blkwingr4_5;
	hide blktail3_10;

	flying = FALSE;
	soaring = FALSE;
	landing = FALSE;
	firing = FALSE;
	attacking = FALSE;
	airborne = FALSE;
	restored = FALSE;
	fly_var = FALSE;

	vetlevel = 0;
	flapcount = 0;
	restore_delay = 5000;

	move emitjim to x-axis [0.0] now;
	move emitjim to y-axis [6.0] now;
	move emitjim to z-axis [13.0] now;

	while (get BUILD_PERCENT_LEFT)
		sleep 100;

	start-script RestoreWatcher();
	start-script FlightControl();
	start-script HeadTurner();
	start-script StatusControl();
}

setSFXoccupy(state)
{
	if (state == SFXOCCUPY_AIR)
		airborne = TRUE;
	else
		airborne = FALSE;
}

SetMaxReloadTime(time)
{
	restore_delay = time * 2;
}

RestoreAfterDelay()
{
	signal SIG_BATTLE;
	set-signal-mask SIG_BATTLE;

	sleep restore_delay;
	set WEAPON_AIM_ABORTED to 0;
	attacking = FALSE;
}

AimWeapon(heading, pitch, weaponnum)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	attacking = TRUE;

	while (firing)
		sleep 100;

	start-script RestoreAfterDelay();
	set WEAPON_READY to weaponnum;
}

FireWeapon(weaponnum)
{
	firing = TRUE;

	set WEAPON_LAUNCH_NOW to weaponnum;

	if (weaponnum == 0)
		play-sound( "FIREBLAK", PLAYSOUND_PRIORITY_BATTLE );
	else if (weaponnum == 1)
		play-sound( "SWOOSH2", PLAYSOUND_PRIORITY_BATTLE );
	else
		play-sound( "SWOOSH2", PLAYSOUND_PRIORITY_BATTLE );

	firing = FALSE;
}

TargetCleared(weaponnum)
{
	signal SIG_BATTLE;
	set WEAPON_AIM_ABORTED to weaponnum;
	attacking = FALSE;
}

QueryWeapon(piecenum, weaponnum)
{
	piecenum = emitjim;
}

SweetSpot(piecenum)
{
	piecenum = blkbody;
}

QueryBlood(piecenum)
{
	piecenum = emitblood1 + rand(0,4);
}

Dying()
{
	set MAGIC_DEATH to TRUE;
}

Killed(severity, corpsetype, damagetype)
{
	corpsetype = 0;

	explode blkwingr1 type FALL;
	explode blkwingl1 type FALL;
	explode blktail1 type FALL;
	explode blkneck1 type FALL | EXPTYPE_BLOODEXPLOSION;
	explode blklegr1 type FALL;
	explode blklegl1 type FALL;
}
