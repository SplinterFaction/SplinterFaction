piece  zonglyph, emitevil, damage1, damage2, damage3, damage4, vetskull1, vetskull2,
       vetskull3, vetskull4, vetskull5, vetskull6, vetskull7, vetskull8, vetskull9, vetskull10,
       spinner;

#define MAX_DAMAGE_FLAMES			4
#define MAX_DAMAGE_FLAME_LEVEL		1
#define MAX_SMOKE_PUFFS_PER_SECOND	5
#define SIG_AIM						2

#include "EXPtype.h"
#include "SFXtype.h"
#include "FlameUnit.h"
#include "SmokeUnit.h"

StatusControl()
{
	var veteran, vetlevel;

	veteran = FALSE;
	vetlevel = 0;

	while (!veteran)
	{
		vetlevel = get VETERAN_LEVEL;

		if (vetlevel >= 1)
			show vetskull1;
		if (vetlevel >= 2)
			show vetskull2;
		if (vetlevel >= 3)
			show vetskull3;
		if (vetlevel >= 4)
			show vetskull4;
		if (vetlevel >= 5)
			show vetskull5;
		if (vetlevel >= 6)
			show vetskull6;
		if (vetlevel >= 7)
			show vetskull7;
		if (vetlevel >= 8)
			show vetskull8;
		if (vetlevel >= 9)
			show vetskull9;
		if (vetlevel >= 10)
		{
			show vetskull10;
			veteran = TRUE;
		}

		sleep 100;
	}
}

Create()
{
	hide vetskull1;
	hide vetskull2;
	hide vetskull3;
	hide vetskull4;
	hide vetskull5;
	hide vetskull6;
	hide vetskull7;
	hide vetskull8;
	hide vetskull9;
	hide vetskull10;

	while (get BUILD_PERCENT_LEFT)
		sleep 100;

	start-script DamageFlameControl();
	start-script StatusControl();
}

AimWeapon(heading, pitch, weaponnum)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	turn spinner to x-axis pitch speed <100.0>;
	turn spinner to y-axis (heading - <180>) speed <100.0>;
	wait-for-turn spinner around x-axis;
	wait-for-turn spinner around y-axis;

	set WEAPON_READY to weaponnum;
}

FireWeapon(weaponnum)
{
	set WEAPON_LAUNCH_NOW to weaponnum;
	play-sound( "lightfls", PLAYSOUND_PRIORITY_BATTLE );
}

TargetCleared(weaponnum)
{
	set WEAPON_AIM_ABORTED to weaponnum;
	signal SIG_AIM;
}

QueryWeapon(piecenum, weaponnum)
{
	piecenum = emitevil;
}

SweetSpot(piecenum)
{
	piecenum = zonglyph;
}

Dying()
{
	set FINISHED_DYING to TRUE;
}

Killed(severity, corpsetype, damagetype)
{
	corpsetype = 1;
	explode damage1 type EXPTYPE_SMALLEXPLOSION | BITMAPONLY;
	explode damage2 type EXPTYPE_SMALLEXPLOSION | BITMAPONLY;
	explode damage3 type EXPTYPE_MEDIUMEXPLOSION | BITMAPONLY;
	explode damage4 type EXPTYPE_MEDIUMEXPLOSION | BITMAPONLY;
}