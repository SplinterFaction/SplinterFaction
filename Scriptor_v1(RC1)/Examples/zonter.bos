piece  torso, emitjim, emit_blood1, emit_blood2, emit_blood3, emit_blood4, hips, shoulder_R_5,
       spear_10, legup_R, legup_L, shoulder_L, shoulder_R, neck1, head, armup_R,
       armlow_R, hand_R, armup_L, armlow_L, leglow_L, foot_L, leglow_R, foot_R,
       neck2, emit_wakel, emit_waker, spear, hand_L, emit_spear, shoulder_L_5;

static-var	moving, aiming, firing, busy_dying;
static-var	kill_attack, legs_restored, restored;
static-var	direction, vetlevel, restore_delay;

#define TURN_RESTORE_SPEED	<500>
#define MOVE_RESTORE_SPEED	[500]
#define SIG_AIM				2
#define SIG_MOVE			4
#define SIG_RESTORE			8

#include "EXPtype.h"
#include "SFXtype.h"

#define ANIM_VARIABLE		(moving && !firing)
#include "zonter\walk.bos"
#include "zonter\walk_road.bos"
#include "zonter\walk_water.bos"
#undef ANIM_VARIABLE

#define ANIM_VARIABLE		moving
#include "zonter\walk_legs.bos"
#undef ANIM_VARIABLE

#define ANIM_VARIABLE		(!busy_dying && !kill_attack)
#include "zonter\attack1.bos"
#include "zonter\restore_x.bos"
#include "zonter\restore_legs.bos"
#undef ANIM_VARIABLE

#define ANIM_VARIABLE		TRUE
#include "zonter\death.bos"
#undef ANIM_VARIABLE


MoveWatcher()
{
	set-signal-mask SIG_MOVE;

	for (;;)
	{
		moving = ((get CURRENT_SPEED) > 5 || direction);
		sleep 100;
	}
}

MeleeControl()
{
	for (;;)
	{
		if (moving)
		{
			if (firing)
				call-script walk_legs();
			else if (get IN_WATER)
				call-script walk_water();
			else if (get ON_ROAD)
				call-script walk_road();
			else
				call-script walk();

			restored = FALSE;
			legs_restored = FALSE;
		}
		else if (!busy_dying)
		{
			if (!legs_restored)
			{
				call-script restore_legs();
				legs_restored = TRUE;
			}
			else if (!restored && !aiming)
			{
				call-script restore_x();
				restored = TRUE;
			}
			else
				sleep 100;
		}
		else
			sleep 100;
	}
}

StatusControl()
{
	var x;

	for (x = 0; x < 2; sleep 1000)
	{
		vetlevel = get VETERAN_LEVEL;

		if (x == 0)
		{
			if (vetlevel > 4)
			{
				hide shoulder_l;
				hide shoulder_r;

				show shoulder_l_5;
				show shoulder_r_5;

				++x;
			}
		}
		else if (x == 1)
		{
			if (vetlevel > 9)
			{
				++x;
			}
		}
	}
}

Create()
{
	hide shoulder_l_5;
	hide shoulder_r_5;
	hide spear_10;

	move emitjim to x-axis [4.0] now;
	move emitjim to y-axis [16.0] now;
	move emitjim to z-axis [14.0] now;

	moving = FALSE;
	aiming = FALSE;
	firing = FALSE;
	busy_dying = FALSE;

	kill_attack = FALSE;
	legs_restored = FALSE;
	restored = FALSE;

	direction = 0;
	vetlevel = 0;
	restore_delay = 5000;

	while (get BUILD_PERCENT_LEFT)
		sleep 100;

	start-script MoveWatcher();
	start-script MeleeControl();
	start-script StatusControl();
}

TurnDirection(dir)
{
	direction = dir;
}

SetMaxReloadTime(time)
{
	restore_delay = time * 2;
}

RestoreAfterDelay()
{
	signal SIG_RESTORE;
	set-signal-mask SIG_RESTORE;

	var x;

	for (x = 0; x < restore_delay; sleep 100)
	{
		if (kill_attack)
			x = restore_delay;
		else
			x = x + 100;
	}

	while (firing)
		sleep 100;

	set WEAPON_AIM_ABORTED to 0;
	aiming = FALSE;
}

AimWeapon(heading, pitch, weaponnum)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	aiming = TRUE;

	while (firing)
		sleep 100;

	start-script RestoreAfterDelay();
	set WEAPON_READY to weaponnum;
}

FireWeapon(weaponnum)
{
	firing = TRUE;
	kill_attack = FALSE;

	call-script attack1(weaponnum);

	firing = FALSE;
}

TargetCleared(weaponnum)
{
	set WEAPON_AIM_ABORTED to weaponnum;
	kill_attack = TRUE;
}

QueryWeapon(piecenum, weaponnum)
{
	piecenum = emitjim;
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

QueryBlood(piecenum)
{
	piecenum = emit_blood1 + rand(0,3);
}

Dying(damagetype)
{
	set-signal-mask 0;

	signal SIG_AIM;
	signal SIG_MOVE;
	signal SIG_RESTORE;

	moving = FALSE;
	busy_dying = TRUE;

	if (damagetype != DT_EXPLOSION)
	{
		if (rand(1,4) == 1)
			play-sound( "ZONTERDIE1", PLAYSOUND_PRIORITY_BATTLE );

		call-script death();
		explode hips type EXPTYPE_SMALLSMOKE | BITMAPONLY;
	}

	set FINISHED_DYING to TRUE;
}

Killed(severity, corpsetype, damagetype)
{
	if (damagetype == DT_EXPLOSION)
	{
		corpsetype = 0;

		explode hips type FALL | EXPTYPE_BLOODEXPLOSION;
		explode legup_l type FALL;
		explode leglow_l type FALL;
		explode foot_l type FALL;
		explode legup_r type FALL;
		explode leglow_r type FALL;
		explode foot_r type FALL;
		explode armup_r type FALL;
		explode armlow_r type FALL;
		explode hand_r type FALL;
		explode armup_l type FALL;
		explode armlow_l type FALL;
		explode hand_l type FALL;
	}
	else if (damagetype == DT_FIRE)
	{
		var x;

		corpsetype = 1;

		for (x = 0; x < 3; sleep 480)
		{
			emit-sfx SFXTYPE_SMALLDAMAGEFLAME from hand_r;
			emit-sfx SFXTYPE_SMALLDAMAGEFLAME from hand_l;
			emit-sfx SFXTYPE_SMALLDAMAGEFLAME from head;

			++x;
		}
	}
	else
		corpsetype = 1;
}

