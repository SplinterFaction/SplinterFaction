#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, thruster1, thruster2, thruster3, thruster4, thruster5, thruster6, thruster7, thruster8, engine1, engine2, engine3, engine4, engine5, engine6, engine7, engine8, genleft, genright, pipes, genbaseleft, genbaseright, nanobase1, nanobase2, lilypad, nano1spin, nano2spin, nanopoint, nano1, nano2, sfxpoint1, sfxpoint2;

static-var  spray, unitviewer, statechg_DesiredState, statechg_StateChanging, building, existing;

// Signal definitions
#define SIG_ACTIVATE			2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx 1026 from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

buildingfx()
{
   while( TRUE )
   {
      if (building) 
      {   
              emit-sfx 1024 from nano1;
              sleep 60;
              emit-sfx 1024 from nano2;
              sleep 60;
       }         
   sleep 600;
   }
}

fx()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
//		if (tech)
//		{
			emit-sfx 1027 from sfxpoint1;
			emit-sfx 1027 from sfxpoint2;
//		}
	sleep 500;
	}
}

Thrust()
{
   while( TRUE )
   {
      if (existing)    
      {
              emit-sfx 1028 from engine1;
              emit-sfx 1028 from engine2;
              emit-sfx 1028 from engine3;
              emit-sfx 1028 from engine4;
              emit-sfx 1028 from engine5;
              emit-sfx 1028 from engine6;
              emit-sfx 1028 from engine7;
              emit-sfx 1028 from engine8;
                }
        sleep 5;    
   }
}

OpenYard()
{
	spin nano1spin around y-axis speed <50.005495>;
	spin nano2spin around y-axis speed <50.005495>;
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	stop-spin nano1spin around z-axis decelerate <15.000000>; 
	stop-spin nano2spin around z-axis decelerate <15.000000>;
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();			
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	unitviewer = FALSE;
	spray = 0;
	existing = TRUE;
	call-script InitState();
	start-script SmokeUnit();
	start-script Buildingfx(); 
//	start-script Buildingfx2(); 
	start-script fx();
//    start-script Thrust();
    turn engine1 to x-axis <90> now;
    turn engine2 to x-axis <90> now;
    turn engine3 to x-axis <90> now;
    turn engine4 to x-axis <90> now;
    turn engine5 to x-axis <90> now;
    turn engine6 to x-axis <90> now;
    turn engine7 to x-axis <90> now;
    turn engine8 to x-axis <90> now;
    spin engine1 around y-axis speed <50.005495>;
    spin engine2 around y-axis speed <50.005495>;
    spin engine3 around y-axis speed <50.005495>;
    spin engine4 around y-axis speed <50.005495>;
    spin engine5 around y-axis speed <50.005495>;
    spin engine6 around y-axis speed <50.005495>;
    spin engine7 around y-axis speed <50.005495>;
    spin engine8 around y-axis speed <50.005495>;
    
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = nano1;
	}
	if( spray == 1 )
	{
		piecenum = nano2;
	}
	++spray;
	if( spray >= 2 )
	{
		spray = 0;
	}
}


Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;

	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
building = 1;
}

StopBuilding()
{
building = 0;
}

QueryBuildInfo(piecenum)
{
	piecenum = nanopoint;
}


Killed(severity, corpsetype) // how it explodes 
{ 
	corpsetype = 1; 
	explode thruster1 type EXPLODE_ON_HIT;
	explode thruster2 type EXPLODE_ON_HIT;
	explode thruster3 type EXPLODE_ON_HIT;
	explode thruster4 type EXPLODE_ON_HIT;
	explode thruster5 type EXPLODE_ON_HIT;
	explode thruster6 type EXPLODE_ON_HIT;
	explode thruster7 type EXPLODE_ON_HIT;
	explode thruster8 type EXPLODE_ON_HIT;
	explode nanobase1 type EXPLODE_ON_HIT;
	explode nanobase2 type EXPLODE_ON_HIT;
	explode nano2spin type EXPLODE_ON_HIT;
	explode nano1spin type EXPLODE_ON_HIT;
	explode genbaseright type EXPLODE_ON_HIT;
	explode genbaseleft type EXPLODE_ON_HIT;
	explode base type EXPLODE_ON_HIT;
	explode lilypad type EXPLODE_ON_HIT;
	explode genleft type EXPLODE_ON_HIT;
	explode genright type EXPLODE_ON_HIT;

} 
