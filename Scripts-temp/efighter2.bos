#define TA        // This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece base, firepoint1, firepoint2, firepoint3, firepoint4, firepoint5, firepoint6, firepoint7, firepoint8, fengine1, fengine2, fengine3, fengine4, rearengines, rengine1, rengine2, leftwing, rightwing, cockpit;

static-var  moving, flames, shooting_num;

#define jethtrail 1025+0

// Signal definitions
#define SIG_AIM 2

SmokeUnit(healthpercent, sleeptime, smoketype)
{
   while( get BUILD_PERCENT_LEFT )
   {
      sleep 400;
   }
   while( TRUE )
   {
      healthpercent = get HEALTH;
      if( healthpercent < 66 )
      {
         smoketype = 256 | 2;
         if( Rand( 1, 66 ) < healthpercent )
         {
            smoketype = 256 | 1;
         }
         emit-sfx 1026 from base;
      }
      sleeptime = healthpercent * 50;
      if( sleeptime < 200 )
      {
         sleeptime = 200;
      }
      sleep sleeptime;
   }
}


Thrust()
{
   while( TRUE )
   {
      if (flames)    
      {
              emit-sfx jethtrail from fengine1;
              emit-sfx jethtrail from fengine2;
              emit-sfx jethtrail from fengine3;
              emit-sfx jethtrail from fengine4;
      }
      if (moving)    
      {
              emit-sfx jethtrail from rengine1;
              emit-sfx jethtrail from rengine2;
      }
        sleep 5;    
   }
}

StartMoving()
{
        moving=1;
}
   
StopMoving()
{   
        moving=0; 
}

MoveRate0()
{
	flames=0;
 	turn rearengines to x-axis <-90.000000> speed <150.000000>;
}
MoveRate1()
{
	flames=1;
 	turn rearengines to x-axis <-70.005495> speed <150.000000>;
}
MoveRate2()
{
	flames=1;
 	turn rearengines to x-axis <0.000000> speed <150.000000>;
}

Create()
   {
//      start-script Thrust();
		shooting_num=1;
        start-script SmokeUnit();
   }

AimWeapon1(heading, pitch) // single weapon with 2 fires this tell sit what to do while aiming 
{
signal SIG_AIM; 
set-signal-mask SIG_AIM;
return (1); 
} 

FireWeapon1() // what do while firing, fires 1 barrel then the next , and resets 
{ 

         if(shooting_num==1)
         {
         	emit-sfx 1024 from firepoint2;
         }

         if(shooting_num==2)
         {
         	emit-sfx 1024 from firepoint3;
         }
         
         if(shooting_num==3)
         {
         	emit-sfx 1024 from firepoint4;
         }
         
         if(shooting_num==4)
         {
         	emit-sfx 1024 from firepoint5;
         }
         
         if(shooting_num==5)
         {
         	emit-sfx 1024 from firepoint6;
         }
         
         if(shooting_num==6)
         {
         	emit-sfx 1024 from firepoint7;
         }
         
         if(shooting_num==7)
         {
         	emit-sfx 1024 from firepoint8;
         }
         
         if(shooting_num==8)
         {
         	emit-sfx 1024 from firepoint1;
         }
	
   shooting_num=shooting_num+1;

            if( shooting_num == 9)
            {  
            	shooting_num=1;
            }
} 

AimFromWeapon1(piecenum) // where it aims the weapon from 
{ 
piecenum = base; 
} 

QueryWeapon1(piecenum) // where the shot is called from 
{ 
	 if (shooting_num==1) 
     {  
     	piecenum=firepoint1;     
     }

     if (shooting_num==2)
     {   
     	piecenum=firepoint2;
     } 
     
     if (shooting_num==3)
     {   
     	piecenum=firepoint3;
     } 
     
     if (shooting_num==4)
     {   
     	piecenum=firepoint4;
     } 
     if (shooting_num==5) 
     {  
     	piecenum=firepoint5;     
     }

     if (shooting_num==6)
     {   
     	piecenum=firepoint6;
     } 
     
     if (shooting_num==7)
     {   
     	piecenum=firepoint7;
     } 
     
     if (shooting_num==8)
     {   
     	piecenum=firepoint8;
     } 
} 

Killed(severity, corpsetype) // how it explodes 
{ 
	corpsetype = 1; 
	explode base type EXPLODE_ON_HIT;
	explode rearengines type EXPLODE_ON_HIT;
	explode leftwing type EXPLODE_ON_HIT;
	explode rightwing type EXPLODE_ON_HIT;
} 